@ <stdio.hdr>
@ <stdlib.hdr>
@ "parser/parser.hdr"
@ "lexer/lexer.hdr"
@ "gen/gen.hdr"

fn syntaxError() {
    printf("syntax error\n");
    exit(1);
}

fn parseTerm(): -> Expr;

fn parseFactor(): -> Expr;

// term { ( "+" | "-") term }
fn parseExpr(): -> Expr {
    local left: -> Expr = parseTerm(); // reg id of left value for ass code
    if (!left) {
        return nullptr; // No term means no expression
    }
    // Term found
    while (token.kind == PLUS || token.kind == MINUS) {
        local tok: Token = token;
        getToken(); // Consume Token
        local right: -> Expr = parseTerm();
        if (!right) { // There must be a term after plus (EBNF)
            syntaxError();
        }
        if (tok.kind == PLUS) {
            left = createBinaryExpr(EXPR_ADD, left, right);
        } else {
            left = createBinaryExpr(EXPR_SUB, left, right);
        }
    }
    return left; // could be dest, but then must be add, this was allow "1"
}

// factor { "*" factor }
fn parseTerm(): -> Expr {
    local left: -> Expr = parseFactor(); // reg id of left value for ass code
    if (!left) {
        return nullptr; // No term means no expression
    }
    // Term found
    while (token.kind == ASTERISK || token.kind == SLASH) {
        local tok: Token = token;
        getToken(); // Consume Token
        local right: -> Expr = parseFactor();
        if (!right) { // There must be a term after plus (EBNF)
            syntaxError();
        }
        if (tok.kind == ASTERISK) {
            left = createBinaryExpr(EXPR_MUL, left, right);
        } else {
            left = createBinaryExpr(EXPR_DIV, left, right);
        }
    }
    return left; // could be dest, but then must be add, this was allow "1"
}

// decimal_literal | "(" expr ")"
fn parseFactor(): -> Expr {
    if (token.kind == DECIMAL_LITERAL) {
        local expr: -> Expr = createIntegerExpr(token.val);
        getToken();
        return expr;
    } else if (token.kind == LPAREN) {
        getToken();
        local expr: -> Expr = parseExpr();
        if (!expr) {
            syntaxError();
        }
        if (token.kind != RPAREN) {
            syntaxError();
        }
        getToken();
        return expr;
    } else {
        return nullptr;
    }
}
